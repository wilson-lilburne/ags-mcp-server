name: Build and Publish AGS MCP Server

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ags-mcp-server

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for complete AGS source
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ags-mcp-server/package-lock.json

    - name: Install dependencies
      working-directory: ags-mcp-server
      run: npm ci

    - name: Build TypeScript
      working-directory: ags-mcp-server
      run: npm run build

    - name: Run tests
      working-directory: ags-mcp-server
      run: npm test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Prepare build context
      working-directory: ags-mcp-server
      run: |
        # Create temporary build context
        mkdir -p /tmp/build-context/app
        cp -r . /tmp/build-context/app/
        cp -r ../Common /tmp/build-context/
        cp -r ../Tools /tmp/build-context/
        cp -r ../libsrc /tmp/build-context/
        cp -r ../CMake /tmp/build-context/
        cp ../CMakeLists.txt /tmp/build-context/

    - name: Create Dockerfile
      run: |
        cat > /tmp/build-context/Dockerfile << 'EOF'
        # Multi-stage build for AGS MCP Server with embedded tools
        FROM ubuntu:22.04 as ags-builder

        RUN apt-get update && apt-get install -y \
            build-essential \
            cmake \
            git \
            wget \
            pkg-config \
            && rm -rf /var/lib/apt/lists/*

        WORKDIR /ags-source
        COPY Common ./Common
        COPY Tools ./Tools  
        COPY libsrc ./libsrc
        COPY CMake ./CMake
        COPY CMakeLists.txt ./CMakeLists.txt

        RUN mkdir build && cd build && \
            cmake .. \
                -DAGS_BUILD_TOOLS=ON \
                -DAGS_BUILD_ENGINE=OFF \
                -DAGS_BUILD_COMPILER=OFF \
                -DCMAKE_BUILD_TYPE=Release \
                -DAGS_USE_LOCAL_ALL_LIBRARIES=OFF && \
            cmake --build . --target crmpak --target crm2ash -- -j$(nproc)

        RUN ./build/Tools/crmpak --help

        FROM node:18-slim as runtime

        COPY --from=ags-builder /ags-source/build/Tools/crmpak /usr/local/bin/crmpak
        COPY --from=ags-builder /ags-source/build/Tools/crm2ash /usr/local/bin/crm2ash
        RUN chmod +x /usr/local/bin/crmpak /usr/local/bin/crm2ash

        WORKDIR /app
        COPY app/package*.json ./
        RUN npm ci --only=production

        COPY app/dist/ ./dist/
        RUN mkdir -p /app/rooms /app/games

        RUN groupadd -r ags && useradd -r -g ags ags && chown -R ags:ags /app
        USER ags

        HEALTHCHECK --interval=30s --timeout=5s --start-period=10s \
            CMD crmpak --help > /dev/null || exit 1

        EXPOSE 3000
        ENV NODE_ENV=production

        CMD ["node", "dist/index.js"]
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: /tmp/build-context
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest crmpak --help