name: Build and Publish

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win32
          - os: macos-latest
            platform: darwin

    steps:
      # Cleanup any existing artifacts from previous runs
      - name: Cleanup
        run: |
          if [ -d "bin" ]; then rm -rf bin; fi
        shell: bash
          
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build TypeScript
        run: npm run build
      
      - name: Clone AGS repository
        run: |
          git clone --depth 1 https://github.com/adventuregamestudio/ags.git ../ags
      
      - name: Build AGS tools on Linux
        if: matrix.platform == 'linux'
        run: |
          mkdir -p bin/${{ matrix.platform }}/x64
          cd ../ags
          
          # Debug: Show current directory
          echo "Current directory: $(pwd)"
          
          # Debug: List directory contents
          echo "Directory contents:"
          ls -la
          
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
          
          # Debug: Show CMake version
          echo "CMake version:"
          cmake --version
          
          # Debug: Check if Tools directory exists
          echo "Tools directory contents before CMake:"
          ls -la Tools || echo "Tools directory not found"
          
          # Create a separate build directory to avoid conflicts
          mkdir -p build_dir
          cd build_dir
          
          # Configure with debug output
          echo "Running CMake configure..."
          cmake .. -DAGS_BUILD_TOOLS=ON -DCMAKE_VERBOSE_MAKEFILE=ON
          
          # Debug: Check CMake output
          echo "CMake output files:"
          ls -la CMakeFiles
          
          # Build with debug output
          echo "Running CMake build..."
          cmake --build . --target crmpak --verbose
          
          # Debug: Check build output
          echo "Build output directory contents:"
          ls -la Tools || echo "Tools directory not found in build"
          
          # Try to copy the binary - search for it in the build directory
          echo "Copying binary to bin directory..."
          find . -name "crmpak" -type f -exec cp {} ../../ags-mcp-server/bin/${{ matrix.platform }}/x64/ \;
      
      - name: Build AGS tools on macOS
        if: matrix.platform == 'darwin'
        run: |
          mkdir -p bin/${{ matrix.platform }}/x64
          cd ../ags
          
          # Debug: Show current directory
          echo "Current directory: $(pwd)"
          
          # Debug: List directory contents
          echo "Directory contents:"
          ls -la
          
          brew install cmake
          
          # Debug: Show CMake version
          echo "CMake version:"
          cmake --version
          
          # Debug: Check if Tools directory exists
          echo "Tools directory contents before CMake:"
          ls -la Tools || echo "Tools directory not found"
          
          # Create a separate build directory to avoid conflicts
          mkdir -p build_dir
          cd build_dir
          
          # Configure with debug output
          echo "Running CMake configure..."
          cmake .. -DAGS_BUILD_TOOLS=ON -DCMAKE_VERBOSE_MAKEFILE=ON
          
          # Debug: Check CMake output
          echo "CMake output files:"
          ls -la CMakeFiles
          
          # Build with debug output
          echo "Running CMake build..."
          cmake --build . --target crmpak --verbose
          
          # Debug: Check build output
          echo "Build output directory contents:"
          ls -la Tools || echo "Tools directory not found in build"
          
          # Try to copy the binary - search for it in the build directory
          echo "Copying binary to bin directory..."
          find . -name "crmpak" -type f -exec cp {} ../../ags-mcp-server/bin/${{ matrix.platform }}/x64/ \;
      
      - name: Build AGS tools on Windows
        if: matrix.platform == 'win32'
        run: |
          New-Item -ItemType Directory -Path bin\${{ matrix.platform }}\x64 -Force
          cd ../ags
          
          # Debug: Show current directory
          echo "Current directory: $pwd"
          
          # Debug: List directory contents
          echo "Directory contents:"
          dir
          
          # Debug: Show CMake version
          echo "CMake version:"
          cmake --version
          
          # Debug: Check if Tools directory exists
          echo "Tools directory contents before CMake:"
          dir Tools -ErrorAction SilentlyContinue
          
          # Create a separate build directory to avoid conflicts
          New-Item -ItemType Directory -Path build_dir -Force
          cd build_dir
          
          # Configure with debug output
          echo "Running CMake configure..."
          # Add specific flags for Windows compatibility
          cmake .. -DAGS_BUILD_TOOLS=ON -DCMAKE_SYSTEM_VERSION=8.1 -DCMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION=8.1
          
          # Debug: Check CMake output
          echo "CMake output files:"
          dir CMakeFiles
          
          # Build with debug output
          echo "Running CMake build..."
          cmake --build . --target crmpak --verbose
          
          # Debug: Check build output
          echo "Build output directory contents:"
          dir Tools -ErrorAction SilentlyContinue
          
          # Try to copy the binary - search for it in the build directory
          echo "Copying binary to bin directory..."
          Get-ChildItem -Path . -Recurse -Filter "crmpak.exe" | ForEach-Object {
            Copy-Item $_.FullName -Destination "..\..\ags-mcp-server\bin\${{ matrix.platform }}\x64\"
          }
      
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}
          path: bin/${{ matrix.platform }}
  
  publish:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build TypeScript
        run: npm run build
      
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: bin
      
      - name: Reorganize binaries
        run: |
          mkdir -p bin/win32/x64
          mkdir -p bin/darwin/x64
          mkdir -p bin/linux/x64
          
          # Move binaries to their correct locations
          mv bin/binaries-win32/x64/* bin/win32/x64/
          mv bin/binaries-darwin/x64/* bin/darwin/x64/
          mv bin/binaries-linux/x64/* bin/linux/x64/
          
          # Clean up
          rm -rf bin/binaries-*
      
      - name: Update version from tag
        run: |
          # Extract version from tag (remove 'v' prefix)
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Updating package.json version to $TAG_VERSION"
          
          # Update version in package.json
          npm version $TAG_VERSION --no-git-tag-version
          
          # Show the updated package.json
          cat package.json | grep version

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
